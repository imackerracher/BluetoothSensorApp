package com.example.groupfourtwo.bluetoothsensorapp.Data;

import java.util.Date;
import java.util.Objects;

/**
 * Wrapper for information about a continuous set of measurements forming a record.
 *
 * @author Stefan Erk
 * @version 1.2
 */

public class Record {

    /**
     * The unique identifier of the recording session.
     */
    private long id;

    /**
     * The MAC address of the sensor that generated the measurement.
     */
    private final Sensor sensor;

    /**
     * The id of the user who received the measurement.
     */
    private final User user;

    /**
     * The moment in time when the record began.
     */
    private final Date begin;

    /**
     * The moment in time when the record ended.
     */
    private Date end;

    /**
     * Indicates whether the record was just started and is still running or already finished.
     */
    private boolean running;


    /**
     * Constructs a new record. Either by firstly connecting or loading from database.
     *
     * @param id       unique MAC address
     * @param sensor   the associated sensor
     * @param user     the associated user
     * @param begin    the sensor's name
     * @param end      datetime of first connection
     * @param running  whether the record has already finished
     */
    Record(long id, Sensor sensor, User user, Date begin, Date end, boolean running) {

        Objects.requireNonNull(id, "ID must not be null");
        Objects.requireNonNull(sensor, "Sensor must not be null.");
        Objects.requireNonNull(user, "User must not be null.");
        Objects.requireNonNull(begin, "Begin point must not be null.");

        this.id = id;
        this.sensor = sensor;
        this.user = user;
        this.begin = begin;
        this.end = end;
        this.running = running;
    }


    /**
     * Start a new record at this very moment.
     * Note: As the record is not saved in the database yet, no valid id can be assigned yet.
     *
     * @param sensor  the associated sensor
     * @param user    the associated user
     * @return  a new running
     */
    public static Record start(Sensor sensor, User user) {
        return new Record(-1, sensor, user, new Date(), null, true);
    }


    /**
     * Return the record's unique id.
     *
     * @return  the record's id
     */
    public long getId() {
        return id;
    }


    /**
     * Return the sensor the record was generated with.
     *
     * @return  the record's sensor
     */
    public Sensor getSensor() {
        return sensor;
    }


    /**
     * Return the user the record was generated by.
     *
     * @return  the record's user
     */
    public User getUser() {
        return user;
    }


    /**
     * Return the datetime when the record was started.
     *
     * @return  the begin point
     */
    public Date getBegin() {
        return begin;
    }


    /**
     * Return the datetime when the record was finished.
     *
     * @return  the end point
     */
    public Date getEnd() {
        return end;
    }


    /**
     * Tells whether this is a record still running.
     *
     * @return  whether the record is running
     */
    public boolean isRunning() {
        return running;
    }


    /**
     * Set the recording's id after being inserted into the database.
     */
    void setId(long id) {
        if (this.id > 0)
            throw new IllegalStateException("Id cannot be set after being assigned by database.");

        this.id = id;
    }


    /**
     * Finish the record. May only be called when the record is just running.
     */
    public void stop() {
        if (!running)
            throw new IllegalStateException("Cannot stop a record that was already finished.");

        end = new Date();
        running = false;
    }
}
